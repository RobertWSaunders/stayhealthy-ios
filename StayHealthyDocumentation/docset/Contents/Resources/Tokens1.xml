<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CommonUtilities.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CommonUtilities</TokenIdentifier>
			<Abstract type="html">This class demonstrates AppleDoc.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
            
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/shortAppVersionNumber</TokenIdentifier>
			<Abstract type="html">h</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSString *)shortAppVersionNumber</Declaration>
			
			
			<Anchor>//api/name/shortAppVersionNumber</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/appBuildNumber</TokenIdentifier>
			<Abstract type="html">To access the apps global build number as string.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSString *)appBuildNumber</Declaration>
			
			<ReturnValue><Abstract type="html">The apps build number in the format (1.0).</Abstract></ReturnValue>
			<Anchor>//api/name/appBuildNumber</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/returnDateInString:</TokenIdentifier>
			<Abstract type="html">Converts the date as a string.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSString *)returnDateInString:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">The date that is returned as a string.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A date as a string in the format (2015-08-09).</Abstract></ReturnValue>
			<Anchor>//api/name/returnDateInString:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/arrayOfDays:endDate:</TokenIdentifier>
			<Abstract type="html">Returns array of dates that lie between two dates.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSMutableArray *)arrayOfDays:(NSDate *)startDate endDate:(NSDate *)endDate</Declaration>
			<Parameters>
				<Parameter>
					<Name>startDate</Name>
					<Abstract type="html">First day in the array.</Abstract>
				</Parameter><Parameter>
					<Name>endDate</Name>
					<Abstract type="html">Last day in the array.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Array of dates between two days.</Abstract></ReturnValue>
			<Anchor>//api/name/arrayOfDays:endDate:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/numberOfDaysBetweenDates:endDate:</TokenIdentifier>
			<Abstract type="html">Returns number of days that lie between two dates.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSInteger)numberOfDaysBetweenDates:(NSDate *)startDate endDate:(NSDate *)endDate</Declaration>
			<Parameters>
				<Parameter>
					<Name>startDate</Name>
					<Abstract type="html">First day in the count, date that the count starts on.</Abstract>
				</Parameter><Parameter>
					<Name>endDate</Name>
					<Abstract type="html">Last day in the count, date that the count ends on.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Number of days between two days, inclusive.</Abstract></ReturnValue>
			<Anchor>//api/name/numberOfDaysBetweenDates:endDate:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/returnReadableDate:</TokenIdentifier>
			<Abstract type="html">Converts date into a more readable format, such as, &apos;Today, August 26th, 2015&apos;.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSString *)returnReadableDate:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">Date that gets converted into readable format.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Date in a readable format, such as, &apos;Today, August 26th, 2015&apos; as a string.</Abstract></ReturnValue>
			<Anchor>//api/name/returnReadableDate:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/returnReadableTime:</TokenIdentifier>
			<Abstract type="html">Converts dates time into a more readable format, such as, &apos;12:32 AM&apos;.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSString *)returnReadableTime:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">Date that gets converted into readable time format.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Date in a readable time format, such as, &apos;12:32 AM&apos; as a string.</Abstract></ReturnValue>
			<Anchor>//api/name/returnReadableTime:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/calculateTime:</TokenIdentifier>
			<Abstract type="html">Calculates the time from a passed date, in format &apos;just now&apos;.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSString *)calculateTime:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">Date that calculated time gets calculated from.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">String saying the time from the passed date, in format &apos;just now&apos;.</Abstract></ReturnValue>
			<Anchor>//api/name/calculateTime:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/resetTime:</TokenIdentifier>
			<Abstract type="html">Resets date to midnight.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSDate *)resetTime:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">Date that gets reset.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">New date which is equal to passed date set to midnight.</Abstract></ReturnValue>
			<Anchor>//api/name/resetTime:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/addHourToDate:hoursToAdd:</TokenIdentifier>
			<Abstract type="html">Adds any number of hours to a date.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSDate *)addHourToDate:(NSDate *)date hoursToAdd:(NSInteger)numHours</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">Date to add the hours to.</Abstract>
				</Parameter><Parameter>
					<Name>numHours</Name>
					<Abstract type="html">Number of hours required to add to the date.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new date based off of the past date with the amount of hours added to it.</Abstract></ReturnValue>
			<Anchor>//api/name/addHourToDate:hoursToAdd:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/dateWithRoundedMinutes:</TokenIdentifier>
			<Abstract type="html">Rounds date to the nearest five minutes.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSDate *)dateWithRoundedMinutes:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">Date to round.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">New date which is equal to the passed date rounded to the nearest five minutes.</Abstract></ReturnValue>
			<Anchor>//api/name/dateWithRoundedMinutes:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/dateWithOutTime:</TokenIdentifier>
			<Abstract type="html">Creates a date without time.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSDate *)dateWithOutTime:(NSDate *)dateWithTime</Declaration>
			<Parameters>
				<Parameter>
					<Name>dateWithTime</Name>
					<Abstract type="html">Date to remove time component from.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Date without time component.</Abstract></ReturnValue>
			<Anchor>//api/name/dateWithOutTime:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/firstNameFromFullName:</TokenIdentifier>
			<Abstract type="html">Gets firstname from a fullname string.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSString *)firstNameFromFullName:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">Full name string.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Firstname string from the fullname.</Abstract></ReturnValue>
			<Anchor>//api/name/firstNameFromFullName:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/lastNameFromFullName:</TokenIdentifier>
			<Abstract type="html">Gets lastname from a fullname string.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSString *)lastNameFromFullName:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">Full name string.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Lastname string from the fullname.</Abstract></ReturnValue>
			<Anchor>//api/name/lastNameFromFullName:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/emailIsValid:</TokenIdentifier>
			<Abstract type="html">Checks if email is a valid email.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (Boolean)emailIsValid:(NSString *)strEmail</Declaration>
			<Parameters>
				<Parameter>
					<Name>strEmail</Name>
					<Abstract type="html">Email to check.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if email is valid, else NO.</Abstract></ReturnValue>
			<Anchor>//api/name/emailIsValid:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/returnUniqueID</TokenIdentifier>
			<Abstract type="html">To return a unique identifier.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSString *)returnUniqueID</Declaration>
			
			<ReturnValue><Abstract type="html">A unique string.</Abstract></ReturnValue>
			<Anchor>//api/name/returnUniqueID</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/concatenateArrayItems:separator:</TokenIdentifier>
			<Abstract type="html">Takes items in an array and creates a string seperating the items by the specified separator.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSString *)concatenateArrayItems:(NSArray *)arrayItems separator:(NSString *)separator</Declaration>
			<Parameters>
				<Parameter>
					<Name>arrayItems</Name>
					<Abstract type="html">Array that holds the items to be separated.</Abstract>
				</Parameter><Parameter>
					<Name>separator</Name>
					<Abstract type="html">String to separate the array items.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the array items seperated by the separator.</Abstract></ReturnValue>
			<Anchor>//api/name/concatenateArrayItems:separator:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/returnGeneralPlist</TokenIdentifier>
			<Abstract type="html">Gives access to the StayHealthy plist as a dictionary.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSDictionary *)returnGeneralPlist</Declaration>
			
			<ReturnValue><Abstract type="html">The StayHealthy general plist as a dictionary.</Abstract></ReturnValue>
			<Anchor>//api/name/returnGeneralPlist</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CommonUtilities/createExerciseQuery:muscle:</TokenIdentifier>
			<Abstract type="html">Creates a query for the StayHealthy database based off of parameters, used for find exercise by muscle.</Abstract>
			<DeclaredIn>CommonUtilities.h</DeclaredIn>
			
			<Declaration>+ (NSString *)createExerciseQuery:(NSString *)table muscle:(NSString *)muscle</Declaration>
			<Parameters>
				<Parameter>
					<Name>table</Name>
					<Abstract type="html">Table in the StayHealthy database.</Abstract>
				</Parameter><Parameter>
					<Name>muscle</Name>
					<Abstract type="html">Muscle to search for in the table.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Query for the StayHealthy database as a string.</Abstract></ReturnValue>
			<Anchor>//api/name/createExerciseQuery:muscle:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
        
        
	</File>
</Tokens>